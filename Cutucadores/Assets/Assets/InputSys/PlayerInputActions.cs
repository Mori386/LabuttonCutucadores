//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Assets/InputSys/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerGameplayInputMap"",
            ""id"": ""2bd4c766-cf04-40f2-999f-3338295d2046"",
            ""actions"": [
                {
                    ""name"": ""MovementInput"",
                    ""type"": ""Value"",
                    ""id"": ""be0bfe5c-5d3d-4a75-b3b8-54340adc570a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1,behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationInput"",
                    ""type"": ""Value"",
                    ""id"": ""8df869c8-462e-46b4-bf7d-886f6cce3913"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1,behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""a9171860-1aa1-4d75-9b6e-2385856d4c58"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1e08f76e-a828-4275-bd21-4ee78e51dc83"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d50ada3d-4508-49e9-86d3-3ff1a47ba16b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""9ac58cf9-6cec-419c-9abd-b16bdac152ec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b404c828-08e1-4c14-a466-d4f0568d88bd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d7c90c4d-5084-4670-8474-52b34fd670e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerDefault"",
            ""bindingGroup"": ""PlayerDefault"",
            ""devices"": []
        }
    ]
}");
        // PlayerGameplayInputMap
        m_PlayerGameplayInputMap = asset.FindActionMap("PlayerGameplayInputMap", throwIfNotFound: true);
        m_PlayerGameplayInputMap_MovementInput = m_PlayerGameplayInputMap.FindAction("MovementInput", throwIfNotFound: true);
        m_PlayerGameplayInputMap_RotationInput = m_PlayerGameplayInputMap.FindAction("RotationInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGameplayInputMap
    private readonly InputActionMap m_PlayerGameplayInputMap;
    private IPlayerGameplayInputMapActions m_PlayerGameplayInputMapActionsCallbackInterface;
    private readonly InputAction m_PlayerGameplayInputMap_MovementInput;
    private readonly InputAction m_PlayerGameplayInputMap_RotationInput;
    public struct PlayerGameplayInputMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerGameplayInputMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementInput => m_Wrapper.m_PlayerGameplayInputMap_MovementInput;
        public InputAction @RotationInput => m_Wrapper.m_PlayerGameplayInputMap_RotationInput;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGameplayInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGameplayInputMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGameplayInputMapActions instance)
        {
            if (m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface != null)
            {
                @MovementInput.started -= m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface.OnMovementInput;
                @MovementInput.performed -= m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface.OnMovementInput;
                @MovementInput.canceled -= m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface.OnMovementInput;
                @RotationInput.started -= m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface.OnRotationInput;
                @RotationInput.performed -= m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface.OnRotationInput;
                @RotationInput.canceled -= m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface.OnRotationInput;
            }
            m_Wrapper.m_PlayerGameplayInputMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementInput.started += instance.OnMovementInput;
                @MovementInput.performed += instance.OnMovementInput;
                @MovementInput.canceled += instance.OnMovementInput;
                @RotationInput.started += instance.OnRotationInput;
                @RotationInput.performed += instance.OnRotationInput;
                @RotationInput.canceled += instance.OnRotationInput;
            }
        }
    }
    public PlayerGameplayInputMapActions @PlayerGameplayInputMap => new PlayerGameplayInputMapActions(this);
    private int m_PlayerDefaultSchemeIndex = -1;
    public InputControlScheme PlayerDefaultScheme
    {
        get
        {
            if (m_PlayerDefaultSchemeIndex == -1) m_PlayerDefaultSchemeIndex = asset.FindControlSchemeIndex("PlayerDefault");
            return asset.controlSchemes[m_PlayerDefaultSchemeIndex];
        }
    }
    public interface IPlayerGameplayInputMapActions
    {
        void OnMovementInput(InputAction.CallbackContext context);
        void OnRotationInput(InputAction.CallbackContext context);
    }
}
